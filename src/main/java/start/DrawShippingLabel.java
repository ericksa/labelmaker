package start;


import javax.print.*;

public class DrawShippingLabel {

    public void PrintShippingLabel(String salesOrder, String model, String desc, String count, Boolean contracted)
            throws PrintException {
        // ZDesigner S4M-203dpi ZPL
        StringBuilder zplPrint = new StringBuilder();
        String[] items = desc.split("\\s*\\,\\s*");
        String count1 = count;
        int box = Integer.parseInt(count1);
        Boolean contract = contracted;
        int boxFinish = boxes(model, box);
        int boxes = boxFinish;
        int box1 = 1;
        while (box1 <= boxes) {
            int itemIndex = 1;
            int descList = 600;

            if (model.contains("HAN001") || model.contains("HAN005") || model.contains("BOL-R45013")
                    || model.contains("SL-19") || model.contains("RM-")) {
                zplPrint.append("^XA^FO250,250^GFA,36762,36762,66,,::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::gY01IFC,gY0KF8,gX0MF,gW01MF8,gW07NF,gV01OFC,gV03OFE,gV0IFEI03IF8,gU01IF8I01IFE,gU03FFCK01IF,gU07FFM07FFE,gU0FFEM03IF,gT01FF8N0IFC,gT03FFO03IF,gT03FEO01IF8,gT07FCP03FFE,gT0FF8Q0IF8,gT0FF8Q0IFC,gS01FFR01IF,gS01FES0IFC,gS01FES03FFE,gS03FCT0IFC,gS07F8T07FFE,gS07F8T01IF,gS07FV07FFE,gS07FV03IF,gS0FFW03FFC,gS0FFW01IF,gS0FEW01IF8,gS0FEX01FFE,gS0FEX01IF8,gS0FEY07FFC,gS0FCY01IF8,gS0FCg0IF8,gS0FCg03IF,gS0FEgG0IFC,gS0FCgG07FFE,gS0FCgH0IF8,gS0FCgH0IFE,gS0FCgH03IF,gS0FCgI07FFE,gS0FCgI03IF,gS0FCgJ0IF8,gS0FCgJ03IF,gS0FCgK0IF8,gS0FCgK03FFE,gS0FCgK01IF8,gS0FCgL0IFC,gS0FCgL03IF,gS0FCgM0IFC,gS0FCgM07FFE,gS0FCgN0IFC,gS0FCgN07FFE,gS0FCgN01IF8,T03IFU0FCgO07FFE,T0JF8T0FCgO03IF,R01LFES07CgP0IFC,R0NFCR07CgP03IF8,Q01NFCR07CgQ0IF8,Q07OF8Q07CgQ03FFE,P01PFCQ07CgQ01IF8,P01PFEQ07CgR07FFC,P03QFQ07CgS0IF8,P0RF8P07CgS0IFC,P0RF8P07CgS01IF,O01RFCP07CgT07FFC,O01RFEP07CgT03FFE,O01KF003JFEP07CgU0IF8,O03JFJ07IFEP07CgU07IF,O03IF8K0JFP07CgU01IF,O03IFL03IFP07CgV07FFC,O03FFEL03IFP07CgV03IF,O03FFCM0IFP07CgW0IFC,O03FFCM0IFP07CgW01IF,O03FFCM0IFP07CgX0IF8,O07FFCM0IFP07CgX03FFE,O07FFCM0IFP07CgY0IF8,O07FFCM0IFP07CgY07FFC,O07FFCM0IFP07CgY03IF,O07FFCL01IFP07CgY01IFC,O07FFEL01IFP0FCh07FFE,O07IF8K03IFP0FChG0IFC,O07IFCK0IFEP0FChG07FFE,O03JFJ07IFEP0FChG01IF8,O03JFEI07IFEP0FChH07FFE,O01JFEI07IFEP0FChH03IF,O01JFEI07IF8P0FChI0IFC,P0JFCI07IF8P0FChI03IF,P0JFCI07IFQ0FChI01IF8,P03IFCI01FFEQ0FChJ03IF,P01IFCI01FFCQ0FChJ03IF8,Q07FFJ01FF8Q0FChK0IFC,Q01FFJ01FCR0FChL0IF8,R0FFJ01F8R0FChL0IFC,R01FK08S0FChL03IF,gS0FChM0IFC,gS0FChM07FFC,gS0FChN0IF8,O078gH0FChN03IF,O07CgH0FChN01IF,O03FEgG0FEhO07FFE,O03FFEg0FEhO03IF,O03IFg0FEhP0IF8,O03JFCX0FEhP01FFE,O03JFCX0FEhP01IF8,O03KFEW0FEhQ07FFE,O03MFV0FEhQ01IF8,O03MF8U0FEhR0IFC,O03NFCT0FEhR03IF,O03OFCS0FEhR01IFC,O07PFS0FEhS07FFE,P0QFR0FEhT0IFC,P07PFEQ0FEhT0IFE,Q03PFCP0FEhT01IF8,Q03QFP0FChU07FFE,Q03QFP0FChU03IF,Q03FFC7MFP0FChV0IFC,Q03FFC03LFP0FChV03IF,Q03FFC00LFP0FChW0IF8,Q03FFCI03JFP0FEhW07FFE,Q03FFCI01JFP0FEhW03IFC,Q03FFCI03JFP0FEhX0IFC,Q03FFC001KFP0FChX01IF8,Q03FFC007KFP0FChY0IFC,Q03FFC0MFP0FChY03IF,Q03QFP0FCi0IFC,Q03QFP0FCi07FFE,Q03PFEP0FCiG07FF8,Q0QFEP0FEiG03FFE,P01QFQ0FEiG03IF,O03PFER0FCiH07FFE,O03PFCR0FCiH03IF8,O07OF8S0FCiI07FF8,O03NFU0FCiI01IF,O03MFEU0FCiJ0IF8,O03LFCV0FCiJ03FFE,O03KFCW0FCiJ01IF8,O03KF8W0FCiK0IFC,O03JFY0FCiK03IF,O03IFCY0FCiK01IFC,O03FFCg0FCiL03FFE,O03F8gG0FCiM0IFC,O07F8gG0FCiM0IFE,O03gI0FCiM01IF8,gS0FCiN07FFE,gS0FCiN03IF,T07MFEP0FCiO0IFC,R03PFP0FCiO03IF,R07PFP0FCiO01IF8,Q03PFEP0FCiP03FFE,P01RFP0FCiP03IF8,P01RFP0FCiQ07FFC,P07RFP0FCiQ03IF8,P0SFP0FCiQ01IFC,P0SFP0FCiR03FFE,O01RFEP0FCiS0IFC,O01SFP0FCiS07FFE,O03SFP0FCiT0IF8,O03SFP0FCiT0JF,O07JF8M02P0FCiT03IF,O07IFg0FCiU03FFE,O07IFg0FCiU03IF8,O07FFEg0FCiU01IF8,O07FFCg0FCiV01IF,O07FFCg0FCiV01IF8,O07FFCg0FCiW0IFE,O07FFCg0FCiW01IF8,O07FFCg0FCiX0IFC,O07FFCg0FCiX03IF,O07FFCg0FCiY0IFE,O07FFCg0FCiY07FFE,O07IFg0FCiY01IFC,O07IF8Y0FCj0IFE,O07IFCY0FEj03IF8,O07SFP0FChR01KFEgH07FFE,O03SFP0FChQ03MF8gG07IF,O03SFP0FChO01PF8gG0IFC,O01SFP0FChM01SFgG03FFE,P0SFP0FChM03SFCg01IF,P0RFEP0FCU01FFEgL07VFgG07FF8,P0RFEP0FCT03JFCgI03XFCg03FFE,P03QFEP0FCT07JFEgI0YFEgG0FFE,Q0RFP0FCS01LFCg07gGFgG03FF,Q07QFP0FCS07LFEX01gIF8g01FF8,Q01QFP0FCS0NFW01gJFCgG0FFC,R01PFP0FCR03NF8T03gLFEgG03FC,S0PFP0FCR03NFCS01gNFgG03FE,gS0FCR07OFR0gPF8g01FF,gS0FCR0PFN0gTF8gG0FF,gS0FCQ01PF8J01gVF8gG07F8,gS0FCQ01PFCJ03gVF8gG07F8,gS0FCQ03PFCJ03gVF8gG03F8,gS0FCQ07PFEJ03gVF8gG01FC,Y03FFEP0FCQ07PFEJ03gWFgG01FE,Y03IFP0FCQ07PFEJ03gWFgG01FE,Y03IFP0FCQ0RFJ03gWFgH0FE,Y03IFP0FCQ0RFJ03gWF8gG0FE,Y03IFP0FCQ0RF8I03gWF8gG0FF,Y03IFP0FCQ0RF8I03gWF8gG07F,Y03IFP0FCQ0RF8I03gWFgH07F,Y03IFP0FCQ0RF8I03gWFgH03F,Y03IFP0FCQ0RF8I03gWF8gG03F,Y03IFP0FCQ0RF8I03gWFCgG03F,:::O03SFP0FCQ0RF8I03gWFCgG03F,:::O03SFP0FCQ0RF8I03gWFCgG07F,O03SFP0FCQ0RF8I03gWFCgG0FF,O03SFP0FCQ0RF8I03gWFCgG0FE,O03SFP0FCQ0RFJ03gWFCgG0FE,O03SFP0FCQ07PFEJ03gWF8gG0FE,O03SFP0FCQ07PFEJ03gWF8g01FE,O03SFP0FCQ07PFEJ03gWFgG01FE,O07SFP0FCQ03PFCJ03gVFEgG01FC,O03SFP0FCQ01PFCJ03gVFEgG03F8,O01O07IFP0FCQ01PF8K0gVFCgG07F8,Y03IFP0FCR0PFP07gQFCgG07F8,Y03IFP0FCR07NFEQ03gPFCgG0FF,Y03IFP0FCR03NFES03gNF8g01FF,Y03IFP0FCR01NFV07gKFEgG03FE,Y03IFP0FCS0NFV01gKFEgG03FC,Y03IFP0FCS07LFEX07gIF8gG0FFC,Y03IFP0FCS01LF8g07gGFgG01FF8,Y03IFP0FCT0LFgG03gGFgG03FF,Y03IFP0FCT01JF8gI07XFCgG0FFE,Y03IFP0FCV07EgL07WF8g01FFE,Y03IFP0FChK0WFgG03FF8,Y03IFP0FChL01TFCgG0IF,Y03FFEP0FChM03SFgG03FFE,gS0FChN01QF8gG07FFC,gS0FChP01NFgH03FFE,gS0FChR03KFEgH07FFE,gS0FCj01IF,gS0FCj07FFC,gS0FCj0IF8,O01OFEC04P0FCiY03FFE,O07SFP0FCiY0IF8,O03SFP0FCiX03IF,O03RFEP0FCiX0IFC,O03SFP0FCiW03IF8,O03SFP0FCiW07FFE,O03SFP0FCiV01IF,O03SFP0FCiV03FFE,O03SFP0FCiV0IF8,O03SFP0FCiU03FFE,O03RFEP0FCiU07FFC,O03SFP0FCiT03IF,O03SFP0FCiT0IFE,O01R06P0FCiS01IF8,gS0FCiS03FFE,gS0FCiS03FFC,gS0FCiS07FE,gS0FCiR0IF8,gS0FCiQ01IF8,gS0FCiQ07FFC,gS0FCiP03IF,gS0FEiP03FFE,S07KFT0FCiO01IF8,R03MFS0FCiO07IF,R07MFS0FCiO0IFC,Q03NFER0FCiN03IF,Q07OFR0FCiN07FFE,Q0PFCQ0FCiM01IF8,P03PFEQ0FCiM07FFC,P03QFQ0FCiM0IFC,P07QF8P0FCiL03FFE,P0RF8P0FCiK01IF8,O01RFCP0FCiK03IF,O03RFEP0FCiK0IFC,O03RFEP0FCiJ03IF8,O03IFEJ03IFEP0FCiJ07FFE,O07IFL07FFEP0FCiI01IF,O07FFEL03IFP0FCiI03IF,O07FFCL03IFP0FCiI0IF8,O07FFCL01IFP0FCiH03IF,O07FFCM0IFP0FCiH0IFE,O07FFCM0IFP0FCiG01IF,O07FF8M0IFP0FCiG07FFE,O07FF8M0IFP0FCiG0IF8,O07FF8M0IFP0FCi07FFE,O07FFCM0IFP0FCi0IFC,O07FFCL01IFP0FChY03IF,O07FFCL03IFP0FChY0IF8,O07FFEL03IFP0FChX01IF8,O07IFL07IFP0FChX07FFC,O03IFEJ03IFEP0FChW03IF8,O03IFEJ07IFEP0FChW03FFE,O03RFEP0FChV01IF8,O01RFEP0FChV03IF,P0RF8P0FChV0IFC,P0RF8P0FChU03IF,P07QFQ0FChU07FFE,P03QFQ0FChT01IF8,P01PFEQ0FChT07FFC,Q0PFCQ0FChT0IFC,Q03NFER0FChS03FFE,Q01NFER0FChS0IF8,R07MFS0FChR01IF,S07KF8S0FChR0IFC,S07JFET0FChQ03IF8,gS0FChQ07FFE,gS0FChP01IF,gS0FChP03IF,gS0FChP0IF8,gS0FChO03FFE,gS0FChO07FFE,gS0FChN01IF,O03RFEP0FChN0IFE,O03SFP0FChN0IF8,O03SFP0FChM07FFE,O03SFP0FChM0IFC,O03RFEP0FChL03IF,O03RFEP0FChL0IFC,O03RFEP0FChK01IF8,O03SFP0FChK07FFC,O03SFP0FChJ01IF8,O03SFP0FChJ03IF,O03SFP0FChJ0IF8,O03SFP0FChI03IF,O03SFP0FChI0IFC,U01LF8P0FChH01IF,U01LF8P0FChH03FFE,U01KFCQ0FChH07FF8,U0KFER0FChG07FFE,T01KFER0FChG0IFC,T07KFS0FCh03FFE,S03KFCS0FCh0IFC,S03KF8S0FCgY01IF,R01KFCT0FCgY07FFC,R0LFCT0FCgX03IF8,R0LFU0FCgX03FFE,Q07KF8U0FCgW01IF,Q0LFV0FCgW03IF,P03KF8V0FCgW0IFC,O01LF8V0FCgV03FFE,O03LFCV0FCgV07FFE,O07SFP0FCgU01IF,O03SFP0FCgU07FFE,O03SFP0FCgU0IFC,O03SFP0FCgT03FFE,O03SFP0FCgS01IFC,O03SFP0FCgS03IF,O03SFP0FCgS0IF8,O03RFEP0FCgR01IF8,O03RFEP0FCgR07FFE,O03SFP0FCgQ01IF8,O03SFP0FCgQ03IF,O03SFP0FCgQ0IF8,O01RFEP0FCgP07IF,gS0FCgP07FFC,gS0FCgO01IF,gS0FCgO07FFE,gS0FCgO0IF8,gS0FCgN03FFE,gS0FCgN07FFC,gS0FCgM03FFE,gS0FCgM0IFC,gS0FCgL01IF,gS0FCgL0IFC,gS0FCgK03IF8,gS0FCgK03FFE,gS0FCgJ01IF8,gS0FCgJ03IF,gS0FCgJ0IFC,gS0FCgI03IF,gS0FCgI07FFE,gS0FEgH01IF,gS0FEgH07FFE,gS0FEgH0IF8,gS0FEgG03FFE,gS0FEgG0IFC,gS0FEg03IF,gS0FEg07FFC,gS0FEg0IF8,gS0FEY07FFE,gS0FEX01IF,gS0FEX03IF,gS0FEX0IF8,gS0FFW03IF,gS07FW07FFC,gS07FV03IF,gS07FV07FFE,gS07FV0IF8,gS07FU07FFE,gS03F8T0IFC,gS01FES03IF,gS01FES0IFC,gS01FFR01IF8,gT0FF8Q07FFC,gT0FF8P01IF8,gT07FCP03FFE,gT03FCO01IF8,gT03FFO03IF,gT01FF8N07FFC,gU0FFEM03IF,gU07FFM07FFE,gU03FFCK01IF8,gU01IF8J0IFE,gV0IFEI03IFC,gV03JFDJFE,gV01OFE,gW07NF,gX0MFC,gX07LF8,gY0KF8,hG058,,:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::^FS ^FO180,130^AGR220,50^FDPalletize Chair count^FS ^FO80,230^AGR220,50^FD greater than 4^FS ^XZ");
            }

            zplPrint.append("^XA\r\n" + "^FX First Section Company\r\n" + "^CFA,30\r\n" + "^FO90,80^FD");

            PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
            // System.out.println(printService.getName());

            zplPrint.append("^FS\r\n" + "\r\n" + "^FX Second Section - Job Number | QTY\r\n" + "^CFA,40\r\n"
                    + "^FO40,230^FDJob " + salesOrder + "^FS\r\n" + "^FO40,270^BY3\r\n" + "^BCN,100,N,N,N\r\n"
                    + "^FD18027^FS\r\n" + "\r\n" + "^FX Third section Part with barcode.\r\n" + "^CFA,30\r\n"
                    + "^FO40,400^FD" + model + "^FS\r\n" + "^FO40,440^BY3\r\n" + "^BCN,100,N,N,N\r\n"
                    + "^CFA,30\\r\\n^FD" + model + "^CFA,20\\r\\n^FS\r\n^CFA,20\r\n" + "^FO30,550^FD" + "^FS^CFA,30^FO350,250^GB400,130,3^FS^CFA,40^FO360,260^FDQuantity in Box^FS^CFA,20");

            for (String item : items) {

                zplPrint.append("^FO40," + descList + " ^FD" + itemIndex + ". " + item + "^FS\r\n");
                itemIndex++;
                descList += 30;

            }
            String extra = " ";
            if (box1 == boxes) {
                extra = "Model Total Shipped = " + count.replaceFirst("^0+(?!$)", "") + " ";
            }
            zplPrint.append("^FS\r\n" + "\r\n" + "^FX Thank you\r\n" + "^FO30,580^GB700,500,3^FS" + "^CF20,40"
                    + "^FO50,960^FD" + extra + "^FS\r\n" + "^FO70,1100^FD" + Settings.TY
                    + "^FS\\r\n^FX Fifth BOX COUNT\r\n^CFA,30\r\n" + "^FO500,1110^FDBox " + box1 + " of " + boxes
                    + "^FS\r\n");

            if (contract) {
                zplPrint.append("\r\n" + "^FX Add Logo\r\n" + Settings.CONTRACT + "\r\n" + "^XZ");
            } else {
                zplPrint.append("\r\n" + "^FX Add Logo\r\n" + Settings.LOGO + "\r\n" + "^XZ");
            }

            String zplFinal = zplPrint.toString();

            zplPrint.setLength(0);
            byte[] by = zplFinal.getBytes();

            DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;

            Doc doc = new SimpleDoc(by, flavor, null);
            System.out.println(zplFinal);
            DocPrintJob printLabel = printService.createPrintJob();
            printLabel.print(doc, null);

            box1++;

        }

    }

    public int boxes(String model, int count) {

        if (model.contains("HAN001") || model.contains("HAN005") || model.contains("BOL-R45013")
                || model.contains("SL-19") || model.contains("RM-")) {
            int newBoxTotal = (int) Math.ceil((double) count / 4);
            return newBoxTotal;
        } else if (model.contains("BOL-R45015")) {
            int newBoxTotal = (int) Math.ceil((double) count / 3);
            return newBoxTotal;
        } else if (model.contains("BOL-R44003") || model.contains("SML-R35010") || model.contains("BOL-R44002")) {
            int newBoxTotal = (int) Math.ceil((double) count / 2);

            return newBoxTotal;
        } else
            return count;

    }

}
